#include <WiFiNINA.h>
#include <PubSubClient.h>
#include <HX711_ADC.h>
#include <DHT.h>
#include <EEPROM.h>

// WiFi credentials
const char* ssid = "Shafin";
const char* password = "shafin123";

// MQTT Broker settings
const char* mqtt_server = "172.20.10.5";
const char* mqtt_username = "jashafin";
const char* mqtt_password = "jashafin786";

// DHT Sensor
#define DHTPIN 2      // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11 // DHT 11

// Pins for the HX711
const int HX711_dout = 4; // Arduino pin connected to HX711 DOUT pin
const int HX711_sck = 5;  // Arduino pin connected to HX711 SCK pin

// HX711 instance
HX711_ADC LoadCell(HX711_dout, HX711_sck);

// DHT instance
DHT dht(DHTPIN, DHTTYPE);

// MQTT Client
WiFiClient wifiClient;
PubSubClient client(wifiClient);

// EEPROM address for the calibration value
const int calVal_eepromAdress = 0;
unsigned long t = 0;

void setup() {
  Serial.begin(57600);
  Serial.println("Starting...");

  // Initialize the LoadCell
  LoadCell.begin();
  float calibrationValue;

  // Fetch the calibration value from EEPROM
  EEPROM.get(calVal_eepromAdress, calibrationValue);

  unsigned long stabilizingtime = 2000; // Precision right after power-up can be improved by adding a few seconds of stabilizing time
  boolean _tare = true; // Set this to false if you don't want tare to be performed in the next step
  LoadCell.start(stabilizingtime, _tare);

  if (LoadCell.getTareTimeoutFlag()) {
    Serial.println("Timeout, check MCU>HX711 wiring and pin designations");
    while (1);
  } else {
    LoadCell.setCalFactor(calibrationValue); // Set calibration value (float)
    Serial.println("Startup is complete");
  }

  // Initialize the DHT sensor
  dht.begin();

  // Connect to WiFi
  connectWiFi();

  // Set MQTT server and callback function
  client.setServer(mqtt_server, 1883);
}

void loop() {
  static boolean newDataReady = 0;
  const int mqttSendInterval = 10000; // MQTT send interval in milliseconds

  // Check for new data/start next conversion
  if (LoadCell.update()) newDataReady = true;

  // Get smoothed value from the dataset
  if (newDataReady) {
    if (millis() > t + mqttSendInterval) {
      float weight = LoadCell.getData();

      // Read temperature and humidity
      float humidity = dht.readHumidity();
      float temperature = dht.readTemperature();

      if (isnan(humidity) || isnan(temperature)) {
        Serial.println("Failed to read from DHT sensor!");
      } else {
        // Print temperature and humidity
        Serial.print("Temperature: ");
        Serial.print(temperature);
        Serial.println(" *C");

        Serial.print("Humidity: ");
        Serial.print(humidity);
        Serial.println(" %");

        // Publish temperature and weight to MQTT
        publishToMQTT("sensor/temperature", temperature);
        publishToMQTT("sensor/weight", weight);

        // Check if weight is below threshold and send notification
        if (weight < 100) {
          publishToMQTT("sensor/notification", "Weight below 100 grams!");
        }
      }

      // Print weight
      Serial.print("Weight: ");
      Serial.print(weight);
      Serial.println(" g");

      Serial.println("------------");

      newDataReady = 0;
      t = millis();
    }
  }

  // Maintain MQTT connection
  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();
}

// Function to connect to WiFi
void connectWiFi() {
  Serial.println("Connecting to WiFi...");
  while (WiFi.begin(ssid, password) != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
}

// Function to reconnect to MQTT
void reconnectMQTT() {
  while (!client.connected()) {
    Serial.println("Attempting MQTT connection...");
    if (client.connect("ArduinoClient", mqtt_username, mqtt_password)) {
      Serial.println("Connected to MQTT broker");
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      Serial.println(" Trying again in 5 seconds...");
      delay(5000);
    }
  }
}

// Function to publish data to MQTT
void publishToMQTT(const char* topic, float value) {
  char msg[20];
  dtostrf(value, 4, 2, msg); // convert float to string
  client.publish(topic, msg);
}

void publishToMQTT(const char* topic, const char* message) {
  client.publish(topic, message);
}
